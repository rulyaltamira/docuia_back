# docpilot-backend/serverless.yml
service: docpilot-newsystem

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  region: eu-west-1
  stage: ${opt:stage, 'dev'}
  
  # Configuración de API Gateway REST para CORS global
  apiGateway:
    cors: true
    shouldStartNameWithService: true
    binaryMediaTypes:
      - '*/*'
  
  # Definir variables de entorno globales para todas las funciones
  environment:
    CONTRACTS_TABLE: ${self:service}-contracts-${self:provider.stage}
    TENANTS_TABLE: ${self:service}-tenants-${self:provider.stage}
    USERS_TABLE: ${self:service}-users-${self:provider.stage}
    ALERTS_TABLE: ${self:service}-alerts-${self:provider.stage}
    ALERT_RULES_TABLE: ${self:service}-alert-rules-${self:provider.stage}
    ALERT_PREFERENCES_TABLE: ${self:service}-alert-preferences-${self:provider.stage}
    ALERT_PROCESSOR_FUNCTION: ${self:service}-${self:provider.stage}-alertProcessor
    ROLES_TABLE: ${self:service}-roles-${self:provider.stage}
    PERMISSIONS_TABLE: ${self:service}-permissions-${self:provider.stage}
    USER_ROLES_TABLE: ${self:service}-user-roles-${self:provider.stage}
    ROLE_PERMISSIONS_TABLE: ${self:service}-role-permissions-${self:provider.stage}
    STATISTICS_TABLE: ${self:service}-statistics-${self:provider.stage}
    # Referencias a los nombres de bucket que se generarán automáticamente
    MAIN_BUCKET: !Ref MainBucket
    SES_BUCKET: !Ref SESBucket
    AUDIT_BUCKET: !Ref AuditBucket
    BEDROCK_MODEL_ID: anthropic.claude-3-sonnet-20240229-v1:0
  
  # Permisos IAM para todas las funciones
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:ListBucket
            - s3:HeadObject
            - s3:GetBucketNotification
            - s3:PutBucketNotification
          Resource:
            - !GetAtt MainBucket.Arn
            - !Join ['', [!GetAtt MainBucket.Arn, '/*']]
            - !GetAtt SESBucket.Arn
            - !Join ['', [!GetAtt SESBucket.Arn, '/*']]
            - !GetAtt AuditBucket.Arn
            - !Join ['', [!GetAtt AuditBucket.Arn, '/*']]
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            - !GetAtt ContractsTable.Arn
            - !GetAtt TenantsTable.Arn
            - !GetAtt UsersTable.Arn
            - !GetAtt AlertsTable.Arn
            - !GetAtt AlertRulesTable.Arn
            - !GetAtt AlertPreferencesTable.Arn
            - !GetAtt RolesTable.Arn
            - !GetAtt PermissionsTable.Arn
            - !GetAtt UserRolesTable.Arn
            - !GetAtt RolePermissionsTable.Arn
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:CreateExportTask
          Resource: "*"
        - Effect: Allow
          Action:
            - ses:SendEmail
            - ses:SendRawEmail
            - ses:GetIdentityVerificationAttributes
          Resource: "*"
        - Effect: Allow
          Action:
            - bedrock:InvokeModel
            - bedrock:InvokeModelWithResponseStream
          Resource: "*"

# Configuración para excluir archivos innecesarios durante el despliegue
package:
  individually: true   # Empaquetar cada función por separado
  patterns:
    - '!node_modules/**'  # Excluir node_modules completo
    - '!.git/**'          # Excluir carpeta .git
    - '!.github/**'       # Excluir carpeta .github si existe
    - '!tests/**'         # Excluir carpeta de tests
    - '!.vscode/**'       # Excluir configuración de VSCode
    - '!.idea/**'         # Excluir configuración de IntelliJ/PyCharm
    - '!__pycache__/**'   # Excluir caché de Python
    - '!*.pyc'            # Excluir archivos compilados de Python
    - '!*.pyo'            # Excluir archivos optimizados de Python
    - '!.pytest_cache/**' # Excluir caché de pytest
    - '!.coverage'        # Excluir archivo de cobertura
    - '!.DS_Store'        # Excluir archivos de sistema macOS
    - '!*.log'            # Excluir archivos de log
    - '!*.md'             # Excluir archivos markdown (README, etc.)
    - '!package-lock.json' # Excluir package-lock.json
    - '!yarn.lock'        # Excluir yarn.lock
    - '!.env*'            # Excluir archivos de entorno

# Definir plugins
plugins:
  - serverless-python-requirements
  - serverless-iam-roles-per-function

# Personalización de las funciones Python
custom:
  pythonRequirements:
    dockerizePip: true
    zip: true
    slim: false
    useDownloadCache: true
    useStaticCache: true
    pipCmdExtraArgs:
      - "--no-cache-dir"

# Definición de funciones
functions:
  corsHandler:
    handler: src/handlers/cors_handler.lambda_handler
    description: Maneja solicitudes OPTIONS para CORS preflight
    memorySize: 128
    timeout: 5
    package:
      patterns:
        - 'src/handlers/cors_handler.py'
        - 'src/utils/cors_middleware.py'
    events:
      - http:
          path: '{proxy+}'
          method: options
          cors:
            origins: ['*']
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Requested-With
              - x-tenant-id
              - x-user-id
            allowCredentials: true

  emailHandler:
    handler: src/handlers/email_handler.lambda_handler
    description: Procesa emails recibidos por SES
    memorySize: 256
    timeout: 30
    package:
      patterns:
        - 'src/handlers/email_handler.py'
        - 'src/utils/**'

  generateUrl:
    handler: src/handlers/generate_url.lambda_handler
    description: Genera URLs prefirmadas para subida de documentos
    memorySize: 128
    timeout: 10
    package:
      patterns:
        - 'src/handlers/generate_url.py'
        - 'src/utils/**'
    events:
      - http:
          path: generate-url
          method: get
          cors: true

  confirmUpload:
    handler: src/handlers/confirm_upload.lambda_handler
    description: Confirma la subida de documentos
    memorySize: 128
    timeout: 10
    package:
      patterns:
        - 'src/handlers/confirm_upload.py'
        - 'src/utils/**'
    events:
      - http:
          path: confirm-upload
          method: post
          cors: true

  documentProcessor:
    handler: src/handlers/document_processor.lambda_handler
    description: Procesa documentos con IA usando Bedrock
    memorySize: 1024
    timeout: 180
    package:
      patterns:
        - 'src/handlers/document_processor.py'
        - 'src/utils/**'

  tenantManagement:
    handler: src/handlers/tenant_management.lambda_handler
    description: Gestiona tenants (clientes)
    memorySize: 256
    timeout: 30
    package:
      patterns:
        - 'src/handlers/tenant_management.py'
        - 'src/utils/**'
    events:
      - http:
          path: tenants
          method: get
          cors: true
      - http:
          path: tenants
          method: post
          cors: true
      - http:
          path: tenants/{tenant_id}
          method: get
          cors: true
      - http:
          path: tenants/{tenant_id}
          method: put
          cors: true
      - http:
          path: tenants/{tenant_id}
          method: delete
          cors: true
      - http:
          path: tenant-plans
          method: get
          cors: true
      - http:
          path: tenants/{tenant_id}/usage
          method: get
          cors: true
      - http:
          path: tenants/{tenant_id}/plan
          method: put
          cors: true

  tenantOnboarding:
    handler: src/handlers/tenant_onboarding.lambda_handler
    description: Proceso automatizado de onboarding para nuevos tenants
    memorySize: 256
    timeout: 30
    package:
      patterns:
        - 'src/handlers/tenant_onboarding.py'
        - 'src/utils/**'
    environment:
      USER_POOL_ID: !Ref CognitoUserPool
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminGetUser
          - cognito-idp:AdminUpdateUserAttributes
        Resource: !GetAtt CognitoUserPool.Arn
    events:
      - http:
          path: tenants/onboard
          method: post
          cors: true
      - http:
          path: tenants/onboard/admin
          method: post
          cors: true
      - http:
          path: tenants/onboard/status
          method: get
          cors: true

  userManagement:
    handler: src/handlers/user_management.lambda_handler
    description: Gestiona usuarios
    memorySize: 256
    timeout: 30
    package:
      patterns:
        - 'src/handlers/user_management.py'
        - 'src/utils/**'
    environment:
      USER_POOL_ID: !Ref CognitoUserPool
    # Añadir estos permisos específicos para la función userManagement
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:AdminCreateUser
          - cognito-idp:AdminGetUser
          - cognito-idp:AdminUpdateUserAttributes
          - cognito-idp:AdminDisableUser
          - cognito-idp:ListUsers
        Resource: !GetAtt CognitoUserPool.Arn
    events:
      - http:
          path: users
          method: get
          cors: true
      - http:
          path: users
          method: post
          cors: true
      - http:
          path: users/{user_id}
          method: get
          cors: true
      - http:
          path: users/{user_id}
          method: put
          cors: true
      - http:
          path: users/{user_id}
          method: delete
          cors: true

  documentManager:
    handler: src/handlers/document_manager.lambda_handler
    description: Gestiona documentos
    memorySize: 256
    timeout: 30
    package:
      patterns:
        - 'src/handlers/document_manager.py'
        - 'src/utils/**'
    events:
      - http:
          path: documents
          method: get
          cors: true
      - http:
          path: documents/{id}
          method: get
          cors: true
      - http:
          path: documents/{id}
          method: delete
          cors: true
      - http:
          path: documents/{id}/view
          method: get
          cors: true
      - http:
          path: documents/{id}/summary
          method: get
          cors: true
      - http:
          path: stats
          method: get
          cors: true

  auditLogger:
    handler: src/handlers/audit_logger.lambda_handler
    description: Registra eventos para auditoría
    memorySize: 256
    timeout: 30
    package:
      patterns:
        - 'src/handlers/audit_logger.py'
        - 'src/utils/**'
    events:
      - http:
          path: audit/log
          method: post
          cors: true
      - http:
          path: audit/export
          method: post
          cors: true

  # Nuevas funciones para gestión de duplicados
  checkDuplicates:
    handler: src/handlers/check_duplicates.lambda_handler
    description: Verifica si un documento es duplicado
    memorySize: 256
    timeout: 30
    package:
      patterns:
        - 'src/handlers/check_duplicates.py'
        - 'src/utils/**'
    events:
      - http:
          path: documents/check-duplicate
          method: post
          cors: true

  handleDuplicate:
    handler: src/handlers/check_duplicates.handle_duplicate
    description: Gestiona qué hacer con un documento duplicado
    memorySize: 256
    timeout: 30
    package:
      patterns:
        - 'src/handlers/check_duplicates.py'
        - 'src/utils/**'
    events:
      - http:
          path: documents/handle-duplicate
          method: post
          cors: true
          
  # Nueva función para configuración de dominios SES
  sesConfigurator:
    handler: src/handlers/email/ses_configurator.lambda_handler
    description: Configura dominios SES para tenants
    memorySize: 256
    timeout: 30
    package:
      patterns:
        - 'src/handlers/email/ses_configurator.py'
        - 'src/utils/**'
    # Añadir estos permisos específicos para la función sesConfigurator
    iamRoleStatements:
      - Effect: Allow
        Action:
          - ses:VerifyDomainIdentity
          - ses:VerifyDomainDkim
          - ses:GetIdentityVerificationAttributes
          - ses:GetIdentityDkimAttributes
          - ses:DeleteIdentity
          - ses:CreateReceiptRuleSet
          - ses:CreateReceiptRule
          - ses:DeleteReceiptRule
          - ses:SetActiveReceiptRuleSet
          - ses:ListReceiptRuleSets
          - route53:ChangeResourceRecordSets
        Resource: "*"
    events:
      - http:
          path: email/domain
          method: post
          cors: true
      - http:
          path: email/domain/status
          method: get
          cors: true
      - http:
          path: email/receipt-rule
          method: post
          cors: true
      - http:
          path: email/domains
          method: get
          cors: true
      - http:
          path: email/domain/{tenant_id}/{domain}
          method: delete
          cors: true

  # Sistema de alertas
  alertRuleManager:
    handler: src/handlers/alerts/alert_rule_manager.lambda_handler
    description: Gestión de reglas de alerta
    memorySize: 256
    timeout: 30
    package:
      patterns:
        - 'src/handlers/alerts/alert_rule_manager.py'
        - 'src/utils/**'
    events:
      - http:
          path: alerts/rules
          method: post
          cors: true
      - http:
          path: alerts/rules
          method: get
          cors: true
      - http:
          path: alerts/rules/{rule_id}
          method: get
          cors: true
      - http:
          path: alerts/rules/{rule_id}
          method: put
          cors: true
      - http:
          path: alerts/rules/{rule_id}
          method: delete
          cors: true
      - http:
          path: alerts/rules/validate
          method: post
          cors: true

  alertProcessor:
    handler: src/handlers/alerts/alert_notifier.lambda_handler
    description: Procesador de alertas (temporal con alert_notifier)
    memorySize: 256
    timeout: 30
    package:
      patterns:
        - 'src/handlers/alerts/alert_notifier.py'
        - 'src/utils/**'
    events:
      - http:
          path: alerts/process
          method: post
          cors: true
      - http:
          path: alerts
          method: get
          cors: true
      - http:
          path: alerts/{alert_id}
          method: get
          cors: true
      - http:
          path: alerts/{alert_id}/status
          method: put
          cors: true
      - http:
          path: alerts/summary
          method: get
          cors: true

  alertNotifier:
    handler: src/handlers/alerts/alert_notifier.lambda_handler
    description: Notificador de alertas
    memorySize: 256
    timeout: 30
    package:
      patterns:
        - 'src/handlers/alerts/alert_notifier.py'
        - 'src/utils/**'
        - '!node_modules/**'
        - '!**/__pycache__/**'
    environment:
      PYTHONPATH: "./:/opt/python"
    events:
      - http:
          path: alerts/notify
          method: post
          cors: true
      - http:
          path: alerts/preferences
          method: post
          cors: true
      - http:
          path: alerts/preferences
          method: get
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
          - dynamodb:Query
          - dynamodb:Scan
        Resource:
          - !GetAtt AlertsTable.Arn
          - !GetAtt AlertRulesTable.Arn
          - !GetAtt AlertPreferencesTable.Arn
          - !GetAtt TenantsTable.Arn
          - !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - ses:SendEmail
          - ses:SendRawEmail
          - ses:GetIdentityVerificationAttributes
        Resource: "*"

  scheduledAlertChecker:
    handler: src/handlers/alerts/scheduled_alert_checker.lambda_handler
    description: Verificador periódico de condiciones para alertas programadas
    memorySize: 256
    timeout: 180  # Más tiempo para revisar muchas reglas
    package:
      patterns:
        - 'src/handlers/alerts/scheduled_alert_checker.py'
        - 'src/utils/**'
    environment:
      ALERT_PROCESSOR_FUNCTION: !GetAtt AlertProcessorLambdaFunction.Arn
    events:
      # Ejecutar cada hora por defecto
      - schedule: rate(1 hour)
    iamRoleStatements:
      - Effect: Allow
        Action:
          - lambda:InvokeFunction
        Resource: !GetAtt AlertProcessorLambdaFunction.Arn
      - Effect: Allow
        Action:
          - cloudwatch:PutMetricData
        Resource: "*"

  # Sistema de control de acceso granular
  roleManagement:
    handler: src/handlers/role_management.lambda_handler
    description: Gestión de roles y permisos para control de acceso granular
    memorySize: 256
    timeout: 30
    package:
      patterns:
        - 'src/handlers/role_management.py'
        - 'src/utils/**'
    events:
      - http:
          path: roles
          method: get
          cors: true
      - http:
          path: roles
          method: post
          cors: true
      - http:
          path: roles/{role_id}
          method: get
          cors: true
      - http:
          path: roles/{role_id}
          method: put
          cors: true
      - http:
          path: roles/{role_id}
          method: delete
          cors: true
      - http:
          path: permissions
          method: get
          cors: true
      - http:
          path: permissions/system
          method: get
          cors: true
      - http:
          path: user-roles
          method: post
          cors: true
      - http:
          path: user-roles
          method: get
          cors: true
      - http:
          path: user-roles/{id}
          method: delete
          cors: true
      - http:
          path: role-permissions
          method: post
          cors: true
      - http:
          path: role-permissions
          method: get
          cors: true
      - http:
          path: role-permissions/{id}
          method: delete
          cors: true
      - http:
          path: my-permissions
          method: get
          cors: true

  metricsCollector:
    handler: src/handlers/stats/metrics_collector.lambda_handler
    description: Recolecta métricas para estadísticas y análisis
    memorySize: 512
    timeout: 300
    package:
      patterns:
        - 'src/handlers/stats/metrics_collector.py'
        - 'src/utils/**'
    events:
      - schedule: rate(1 hour)
      - http:
          path: stats/collect
          method: post
          cors: true

  statisticsApi:
    handler: src/handlers/stats/statistics_api.lambda_handler
    description: API para consulta de estadísticas
    memorySize: 256
    timeout: 30
    package:
      patterns:
        - 'src/handlers/stats/statistics_api.py'
        - 'src/utils/**'
    events:
      - http:
          path: stats/documents
          method: get
          cors: true
      - http:
          path: stats/users
          method: get
          cors: true
      - http:
          path: stats/processing
          method: get
          cors: true
      - http:
          path: stats/storage
          method: get
          cors: true
      - http:
          path: stats/critical-documents
          method: get
          cors: true
      - http:
          path: stats/summary
          method: get
          cors: true
      - http:
          path: stats/trends
          method: get
          cors: true
      - http:
          path: stats/key-dates
          method: get
          cors: true

  reportGenerator:
    handler: src/handlers/stats/report_generator.lambda_handler
    description: Genera informes de estadísticas
    memorySize: 512
    timeout: 300
    package:
      patterns:
        - 'src/handlers/stats/report_generator.py'
        - 'src/utils/**'
    events:
      - schedule: rate(1 day)
      - http:
          path: reports/generate
          method: post
          cors: true
      - http:
          path: reports
          method: get
          cors: true
      - http:
          path: reports/{report_id}
          method: get
          cors: true
      - http:
          path: reports/schedule
          method: post
          cors: true
      - http:
          path: reports/schedules
          method: get
          cors: true
      - http:
          path: reports/schedules/{schedule_id}
          method: delete
          cors: true

  statsManager:
    handler: src/handlers/stats/stats_manager.lambda_handler
    description: Gestiona estadísticas y análisis
    memorySize: 256
    timeout: 30
    package:
      patterns:
        - 'src/handlers/stats/stats_manager.py'
        - 'src/utils/**'
    events:
      - http:
          path: stats/summary
          method: get
          cors: true
      - http:
          path: stats/documents
          method: get
          cors: true
      - http:
          path: stats/users
          method: get
          cors: true
      - http:
          path: stats/alerts
          method: get
          cors: true

# Definición de recursos
resources:
  Resources:
    # Tablas DynamoDB
    ContractsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONTRACTS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    TenantsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TENANTS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH

    # Tablas DynamoDB para el sistema de alertas
    AlertsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ALERTS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: alert_id
            AttributeType: S
        KeySchema:
          - AttributeName: alert_id
            KeyType: HASH

    AlertRulesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ALERT_RULES_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: rule_id
            AttributeType: S
        KeySchema:
          - AttributeName: rule_id
            KeyType: HASH

    AlertPreferencesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ALERT_PREFERENCES_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: preference_id
            AttributeType: S
        KeySchema:
          - AttributeName: preference_id
            KeyType: HASH

    # Tablas DynamoDB para el sistema de control de acceso
    RolesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ROLES_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: role_id
            AttributeType: S
        KeySchema:
          - AttributeName: role_id
            KeyType: HASH

    PermissionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PERMISSIONS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: permission_code
            AttributeType: S
        KeySchema:
          - AttributeName: permission_code
            KeyType: HASH

    UserRolesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_ROLES_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    RolePermissionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ROLE_PERMISSIONS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    StatisticsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.STATISTICS_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: metric_id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: tenant_id
            AttributeType: S
        KeySchema:
          - AttributeName: metric_id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: tenant-index
            KeySchema:
              - AttributeName: tenant_id
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    ReportsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-reports-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: report_id
            AttributeType: S
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: created_at
            AttributeType: S
        KeySchema:
          - AttributeName: report_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: tenant-date-index
            KeySchema:
              - AttributeName: tenant_id
                KeyType: HASH
              - AttributeName: created_at
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    ReportSchedulesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-report-schedules-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: schedule_id
            AttributeType: S
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: next_run
            AttributeType: S
        KeySchema:
          - AttributeName: schedule_id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: tenant-index
            KeySchema:
              - AttributeName: tenant_id
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: next-run-index
            KeySchema:
              - AttributeName: next_run
                KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY

    # Buckets S3 con nombres auto-generados
    MainBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET, PUT, POST, HEAD]
              AllowedOrigins: ['*']
              MaxAge: 3000

    SESBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain

    AuditBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        LifecycleConfiguration:
          Rules:
            - Id: RetainAuditLogs
              Status: Enabled
              Prefix: audit-logs/
              Transitions:
                - TransitionInDays: 90
                  StorageClass: GLACIER
              ExpirationInDays: 365

    # Permisos para que S3 pueda invocar funciones Lambda
    EmailHandlerPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt EmailHandlerLambdaFunction.Arn
        Principal: s3.amazonaws.com
        SourceArn: !GetAtt SESBucket.Arn

    DocumentProcessorPermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt DocumentProcessorLambdaFunction.Arn
        Principal: s3.amazonaws.com
        SourceArn: !GetAtt MainBucket.Arn

    # Cognito User Pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${self:provider.stage}
        AutoVerifiedAttributes:
          - email
        Schema:
          - Name: email
            AttributeDataType: String
            Mutable: true
            Required: true
          - Name: custom:tenant_id
            AttributeDataType: String
            Mutable: true
            Required: false
          - Name: custom:role
            AttributeDataType: String
            Mutable: true
            Required: false

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-app-client-${self:provider.stage}
        UserPoolId: !Ref CognitoUserPool
        GenerateSecret: false  # Cambiado a false para permitir aplicaciones frontend
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
          - USER_PASSWORD_AUTH

  # Outputs para uso en frontend o integración con otros sistemas
  Outputs:
    ApiUrl:
      Description: URL de la API
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}
    UserPoolId:
      Description: ID del User Pool de Cognito
      Value: !Ref CognitoUserPool
    UserPoolClientId:
      Description: ID del cliente de aplicación de Cognito
      Value: !Ref CognitoUserPoolClient
    MainBucketName:
      Description: Nombre del bucket principal
      Value: !Ref MainBucket
    SESBucketName:
      Description: Nombre del bucket SES
      Value: !Ref SESBucket
    AuditBucketName:
      Description: Nombre del bucket de auditoría
      Value: !Ref AuditBucket